/*!
 *  MIT License
 *  
 *  Copyright (c) 2023 Ildar Bikmamatov <support@bayrell.org>
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

namespace App.Hooks;

use Runtime.Web.AppHook as BaseAppHook;

#ifcode PHP then
use Runtime\fs;
use Runtime\rs;
use Runtime\Collection;
use Runtime\Dict;
#endif


class AppHook extends BaseAppHook
{
	
	/**
	 * Register hooks
	 */
	void register_hooks()
	{
		#ifdef BACKEND then
		this.register( static::CSS_SAVE );
		this.register( static::RENDER_HEAD );
		this.register( static::RENDER_BODY );
		#endif
		
		this.register( static::CSS_CLASS_NAMES );
		this.register( static::LAYOUT_CLASS_NAME );
	}
	
	
	
	/**
	 * Returns render head classes
	 */
	Dict render_head(Dict d)
	{
		d <= classes <= d["classes"].concat([
			"App.Templates.Components.Head",
		]);
		
		return d;
	}
	
	
	
	/**
	 * Returns render body classes
	 */
	Dict render_body(Dict d)
	{
		d <= classes <= d["classes"].concat([
			"App.Templates.Components.Body",
		]);
		
		return d;
	}
	
	
	
	/**
	 * Returns layout class name
	 */
	Dict layout_class_name(Dict d)
	{
		string layout_name = d["layout_name"];
		
		if (layout_name == "default")
		{
			d <= layout_class_name <= "App.Templates.LayoutPage";
		}
		
		return d;
	}
	
	
	
	/**
	 * Extends css class names
	 */
	Dict css_class_names(Dict d)
	{
		d <= css_class_names <= d["css_class_names"].concat([
			"App.Templates.Pages.LayoutPage",
			"App.Templates.Pages.IndexPage",
		]);
		return d;
	}
	
	
	
	#ifcode PHP then
	
    
    /**
	 * Css save
	 */
	function css_save($d)
	{
		$css_class_names = $d->get("css_class_names");
		
		$css_content = trim( \Runtime\Web\Component::getCss( $css_class_names ) );
		
		$file_path = rs::join(
			fs::DIRECTORY_SEPARATOR,
			Collection::from([ BASE_PATH, "public", "assets", "app.css" ])
		);
		$file_size = 0;
		
		if ($file_path)
		{
			if (file_exists($file_path)) $file_size = filesize($file_path);
			if (strlen($css_content) != $file_size)
			{
				$dir_name = dirname($file_path);
				if (!file_exists($dir_name)) mkdir($dir_name, 0775, true);
				file_put_contents($file_path, $css_content);
			}
		}
	}
	
	#endif
	
}